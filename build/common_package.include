import platform

def MakeInstall(top_dir, product_dir, package_dir, use_etc_default=False):
  ext = 'so'
  if platform.system() == 'Darwin':
    ext = 'dylib'

  # Cleanup tree
  bin_dir = os.path.join(product_dir, package_dir, "usr", "bin", "dist-clang")
  lib_dir = os.path.join(product_dir, package_dir, "usr", "lib", "dist-clang")
  etc_dir = os.path.join(product_dir, package_dir, "etc")
  if use_etc_default:
    etc_dir = os.path.join(product_dir, package_dir, "etc", "default")
  pylib_dir = os.path.join(product_dir, package_dir, "usr", "lib", "python2.7", "dist_clang")

  if platform.system() == 'Darwin':
    bin_dir = os.path.join(product_dir, package_dir, "usr", "local", "bin", "dist-clang")
    lib_dir = os.path.join(product_dir, package_dir, "usr", "local", "lib", "dist-clang")
    etc_dir = os.path.join(product_dir, package_dir, "etc")
    pylib_dir = os.path.join(product_dir, package_dir, "Library", "Python", "2.7", "site-packages", "dist_clang")

  shutil.rmtree(os.path.join(product_dir, package_dir))

  os.makedirs(bin_dir)
  os.makedirs(lib_dir)
  os.makedirs(etc_dir)
  os.makedirs(os.path.join(pylib_dir, "base"))
  os.makedirs(os.path.join(pylib_dir, "daemon"))
  os.makedirs(os.path.join(pylib_dir, "net"))
  os.makedirs(os.path.join(pylib_dir, "perf"))

  # Copy executables
  shutil.copy(os.path.join(product_dir, "clang"), bin_dir)
  shutil.copy(os.path.join(product_dir, "clangd"), bin_dir)
  os.symlink("clang", os.path.join(bin_dir, "clang++"))

  # Copy libraries
  shutil.copy(os.path.join(product_dir, "libbase."+ext), lib_dir)
  shutil.copy(os.path.join(product_dir, "libbase_proto."+ext), lib_dir)
  shutil.copy(os.path.join(product_dir, "libc++."+ext), lib_dir)
  shutil.copy(os.path.join(product_dir, "libc++abi."+ext), lib_dir)
  shutil.copy(os.path.join(product_dir, "libcommand."+ext), lib_dir)
  shutil.copy(os.path.join(product_dir, "libcounter."+ext), lib_dir)
  shutil.copy(os.path.join(product_dir, "libfile_cache."+ext), lib_dir)
  shutil.copy(os.path.join(product_dir, "liblogging."+ext), lib_dir)
  shutil.copy(os.path.join(product_dir, "libnet."+ext), lib_dir)
  shutil.copy(os.path.join(product_dir, "libnet_proto."+ext), lib_dir)
  shutil.copy(os.path.join(product_dir, "libprotobuf."+ext), lib_dir)
  shutil.copy(os.path.join(product_dir, "libsnappy."+ext), lib_dir)
  shutil.copy(os.path.join(product_dir, "libstat_service."+ext), lib_dir)
  if platform.system() != 'Darwin':
    shutil.copy(os.path.join(product_dir, "libtcmalloc."+ext), lib_dir)

  # Copy configs
  shutil.copy(os.path.join(top_dir, "install", "clangd.conf"), etc_dir)

  # Copy python bindings
  gen_dir = os.path.join(product_dir, "gen")
  shutil.copy(os.path.join(gen_dir, "src", "base", "base_pb2.py"), os.path.join(pylib_dir, "base"))
  shutil.copy(os.path.join(gen_dir, "src", "daemon", "remote_pb2.py"), os.path.join(pylib_dir, "daemon"))
  shutil.copy(os.path.join(gen_dir, "src", "daemon", "configuration_pb2.py"), os.path.join(pylib_dir, "daemon"))
  shutil.copy(os.path.join(gen_dir, "src", "net", "universal_pb2.py"), os.path.join(pylib_dir, "net"))
  shutil.copy(os.path.join(gen_dir, "src", "perf", "stat_pb2.py"), os.path.join(pylib_dir, "perf"))
  open(os.path.join(pylib_dir, "__init__.py"), 'a').close()
  open(os.path.join(pylib_dir, "base", "__init__.py"), 'a').close()
  open(os.path.join(pylib_dir, "daemon", "__init__.py"), 'a').close()
  open(os.path.join(pylib_dir, "net", "__init__.py"), 'a').close()
  open(os.path.join(pylib_dir, "perf", "__init__.py"), 'a').close()

  # Install python protobuf
  cwd = os.getcwd()
  os.chdir(os.path.join(top_dir, "src", "third_party", "protobuf", "exported", "python"))
  os.environ["PROTOC"] = os.path.join(product_dir, "protoc")
  subprocess.call(["python", "setup.py", "build"])
  subprocess.call(["python", "setup.py", "install", "--root", pylib_dir, "--install-purelib=/", "--no-compile"])
  subprocess.call(["git", "clean", "-df", "."])
  open(os.path.join(pylib_dir, "google", "__init__.py"), 'a').close()
  os.chdir(cwd)
