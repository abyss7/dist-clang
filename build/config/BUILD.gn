config("base") {
  cflags = [
    "-fPIC",
    "-pipe",
    "-pthread",
    "-Wall",
    "-Wextra",
    "-Woverloaded-virtual",
    "-Wsign-compare",
    "-Wwrite-strings",
    "-Wno-unknown-warning-option",
    "-Wno-error=assume",
    "-Wno-error=unused-command-line-argument",
    "-Werror",
    "-pedantic",
  ]

  cflags_cc = [ "-std=c++17" ]

  include_dirs = [
    "//src",
    "$root_gen_dir/src",
  ]
}

config("default_library") {
  cflags = [ "-fPIC" ]

  cflags_cc = [
    "-std=c++17",
    "-nostdinc++",
  ]

  defines = [ "_LIBCPP_ENABLE_CXX17_REMOVED_UNEXPECTED_FUNCTIONS" ]

  include_dirs = [ "//src/third_party/libcxx/exported/include" ]

  ldflags = [ "-nodefaultlibs" ]

  libs = [ "c" ]
}

config("debug") {
  cflags = [
    "-g",
    "-O0",
  ]

  defines = [ "_DEBUG" ]
}

config("release") {
  cflags = [
    "-fomit-frame-pointer",
    "-O3",
  ]

  defines = [ "NDEBUG" ]

  if (!portable_build) {
    if (host_os == "linux") {
      ldflags = [
        "-rpath",
        "/usr/lib/dist-clang",
      ]
    } else {
      ldflags = [
        "-rpath",
        "/usr/local/lib/dist-clang",
      ]
    }
  }
}

config("no_stdlibs") {
  cflags_cc = [ "-nostdinc++" ]

  ldflags = [ "-nodefaultlibs" ]

  libs = [
    "c",
    "m",
    "pthread",
  ]
}

config("no_exceptions") {
  cflags_cc = [ "-fno-exceptions" ]
  ldflags = [ "-fno-exceptions" ]

  if (host_os == "win") {
    defines = [ "_HAS_EXCEPTIONS=0" ]
  }
}

config("no_rtti") {
  cflags_cc = [ "-fno-rtti" ]
  ldflags = [ "-fno-rtti" ]
}

import("//build/llvm/llvm.gni")

config("libclang_includes") {
  defines = llvm_defines
  include_dirs = [ "//build/llvm/" + host_os + "/include" ]
}

config("libclang") {
  defines = llvm_defines
  include_dirs = [ "//build/llvm/" + host_os + "/include" ]
  lib_dirs = [ "//build/llvm/" + host_os + "/lib" ]

  libs = [ "c" ]
  libs += [
    "clangTooling",
    "clangFrontendTool",
    "clangFrontend",
    "clangDriver",
    "clangSerialization",
    "clangCodeGen",
    "clangParse",
    "clangSema",
    "clangStaticAnalyzerFrontend",
    "clangStaticAnalyzerCheckers",
    "clangStaticAnalyzerCore",
    "clangAnalysis",
    "clangARCMigrate",
    "clangRewriteFrontend",
    "clangRewrite",
    "clangEdit",
    "clangAST",
    "clangLex",
    "clangBasic",
  ]
  libs += llvm_libs
  libs += llvm_system_libs
}

config("version") {
  defines = [ "VERSION=\"$version\"" ]
}

config("asan") {
  if (use_asan) {
    cflags = [
      "-fsanitize=address",
      "-fno-omit-frame-pointer",
    ]

    ldflags = [ "-fsanitize=address" ]

    if (host_os == "linux") {
      libs = [
        "dl",
        "rt",
      ]
    }
  }
}

config("tsan") {
  if (use_tsan) {
    cflags = [ "-fsanitize=thread" ]
    ldflags = [ "-fsanitize=thread" ]

    if (host_os == "linux") {
      libs = [ "dl" ]
    }
  }
}
