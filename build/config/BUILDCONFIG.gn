# =============================================================================
# Command-line arguments, with default values.
# =============================================================================

declare_args() {
  # Build for debugging.
  config_for_debug = false

  # Build for testing.
  config_for_tests = false

  # Portable build
  portable_build = false

  # Build version.
  version = exec_script("//build/version.py", [], "string")

  # Use Clang ASan.
  use_asan = false

  # Use Clang TSan.
  use_tsan = false
}

assert(!(use_asan && use_tsan), "Use either ASan or TSan at the same time")

# =============================================================================
# Internal flags, with default values and conditions.
# =============================================================================

use_tcmalloc = false

# Mac OS X 10.10 doesn't work with tcmalloc. FIXME: Check Mac OS X 10.11
# Thread Sanitizer doesn't like tcmalloc either.
if (host_os != "mac" && host_os != "win" && !use_tsan) {
  use_tcmalloc = true
}

# =============================================================================
# Setup configurations.
# =============================================================================

default_configs = [
  "//build/config:asan",
  "//build/config:base",
  "//build/config:no_stdlibs",
  "//build/config:tsan",
]

if (host_os == "mac") {
  default_configs += [
    "//build/config/mac:compatibility",
  ]
}

if (config_for_tests) {
  if (!use_tsan) {
    use_asan = true
    if (host_os == "mac") {
      # FIXME: ASan binaries doesn't run on Mac
      use_asan = false
    }
  }

  default_configs += [ "//build/config:debug" ]
} else {
  default_configs += [
    "//build/config:no_exceptions",
    "//build/config:no_rtti",
  ]

  if (config_for_debug) {
    default_configs += [ "//build/config:debug" ]
  } else {
    default_configs += [ "//build/config:release" ]
  }
}

if (host_os == "linux") {
  default_configs += [ "//build/config/linux:base" ]
}
if (host_os == "mac") {
  default_configs += [ "//build/config/mac:base" ]
}
if (host_os == "win") {
  default_configs += [ "//build/config/win:base" ]
}

# =============================================================================
# Setup dependencies.
# =============================================================================

default_deps = []
if (host_os != "win") {
  default_deps += [
    "//src/third_party/libcxx:c++",
    "//src/third_party/libcxxabi:c++abi",
  ]
}

if (use_tcmalloc) {
  default_deps += [ "//src/third_party/gperftools:tcmalloc" ]
}

# =============================================================================
# Setup visibility.
# =============================================================================

default_visibility = [
  ":*",
  "//:*",
  "//src/cache/*",
  "//src/client/*",
  "//src/daemon/*",
  "//src/net/*",
  "//src/perf/*",
  "//src/test/*",
  "//tools/*",
]

# =============================================================================
# Set defaults.
# =============================================================================

set_defaults("executable") {
  visibility = default_visibility
  configs = default_configs
  deps = default_deps
}

set_defaults("shared_library") {
  visibility = default_visibility
  configs = default_configs
  deps = default_deps
}

set_defaults("source_set") {
  visibility = [ ":*" ]
  configs = default_configs
  deps = default_deps
}

set_defaults("static_library") {
  visibility = [ ":*" ]
  configs = default_configs
  deps = default_deps
}

# =============================================================================
# Filter platform-specific sources.
# =============================================================================

linux_sources_filters = [
  "*_linux.h",
  "*_linux.cc",
  "*_linux_test.h",
  "*_linux_test.cc",
]

mac_sources_filters = [
  "*_mac.h",
  "*_mac.cc",
  "*_mac_test.h",
  "*_mac_test.cc",
]

posix_sources_filters = [
  "*_posix.h",
  "*_posix.cc",
  "*_posix_test.h",
  "*_posix_test.cc",
]

win_sources_filters = [
  "*_win.h",
  "*_win.cc",
  "*_win_test.h",
  "*_win_test.cc",
]

sources_assignment_filter = []
if (host_os != "mac") {
  sources_assignment_filter += mac_sources_filters
}
if (host_os != "linux") {
  sources_assignment_filter += linux_sources_filters
}
if (host_os != "mac" && host_os != "linux") {
  sources_assignment_filter += posix_sources_filters
}
if (host_os != "win") {
  sources_assignment_filter += win_sources_filters
}

set_sources_assignment_filter(sources_assignment_filter)

# =============================================================================
# Setup toolchain.
# =============================================================================

if (host_os == "linux") {
  set_default_toolchain("//build/toolchain/linux:clang")
}
if (host_os == "mac") {
  set_default_toolchain("//build/toolchain/mac:clang")
}
if (host_os == "win") {
  set_default_toolchain("//build/toolchain/win:clang")
}
