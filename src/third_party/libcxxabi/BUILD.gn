#
# Generated from CMake Ninja with options:
#
#  LIBCXXABI_ENABLE_ASSERTIONS = ON
#  LIBCXXABI_ENABLE_PEDANTIC   = ON
#  LIBCXXABI_ENABLE_WERROR     = OFF
#  LIBCXXABI_USE_LLVM_UNWINDER = OFF
#  LIBCXXABI_ENABLE_SHARED     = ON
#

config("includes") {
  include_dirs = [ "exported/include" ]
}

config("flags") {
  defines = [
    "__STDC_CONSTANT_MACROS",
    "__STDC_FORMAT_MACROS",
    "__STDC_LIMIT_MACROS",

    # TODO(matthewtff): Remove this define once libcxxabi updated to have own
    # implementation of __cxa_thread_atexit_impl
    "HAVE___CXA_THREAD_ATEXIT_IMPL",
  ]

  cflags = [
    "-fdata-sections",
    "-ffunction-sections",

    # Warnings:
    "-Werror=date-time",
  ]

  cflags_cc = [
    "-fstrict-aliasing",
    "-fvisibility-inlines-hidden",
    "-pedantic",

    # Warnings:
    "-Werror=return-type",
    "-W",
    "-Wall",
    "-Wchar-subscripts",
    "-Wconversion",
    "-Wmismatched-tags",
    "-Wmissing-braces",
    "-Wnewline-eof",
    "-Wno-unused-function",
    "-Wshadow",
    "-Wshorten-64-to-32",
    "-Wsign-compare",
    "-Wsign-conversion",
    "-Wstrict-aliasing=2",
    "-Wstrict-overflow=4",
    "-Wunused-parameter",
    "-Wunused-variable",
    "-Wwrite-strings",
    "-Wno-error",
  ]
  
  if (host_os == "mac") {
    ldflags = exec_script("//build/macosx_sdk_libs.py", [], "list lines")
    ldflags += [
      "-compatibility_version",
      "1.0.0",
      "-current_version",
      "1.0.0",
    ]
  }
}

shared_library("c++abi") {
  visibility = []
  visibility = [
    "//:*",
    "//src/*",
    "//tools/*",
  ]

  sources = [
    "exported/src/abort_message.cpp",
    "exported/src/cxa_aux_runtime.cpp",
    "exported/src/cxa_default_handlers.cpp",
    "exported/src/cxa_demangle.cpp",
    "exported/src/cxa_exception.cpp",
    "exported/src/cxa_exception_storage.cpp",
    "exported/src/cxa_guard.cpp",
    "exported/src/cxa_handlers.cpp",
    "exported/src/cxa_new_delete.cpp",
    "exported/src/cxa_personality.cpp",
    "exported/src/cxa_thread_atexit.cpp",
    "exported/src/cxa_unexpected.cpp",
    "exported/src/cxa_vector.cpp",
    "exported/src/cxa_virtual.cpp",
    "exported/src/exception.cpp",
    "exported/src/private_typeinfo.cpp",
    "exported/src/stdexcept.cpp",
    "exported/src/typeinfo.cpp",
  ]

  public = [
    "exported/include/cxxabi.h",
  ]

  libs = [ "pthread" ]  # TODO: may be move to "default_library" config?
  if (host_os == "mac") {
    libs += [ "System.framework" ]
  }

  configs = []
  configs = [
    ":flags",
    "//build/config:default_library",
  ]

  deps = []
  if (host_os == "linux") {
    deps = [
      "//src/third_party/libunwind:unwind",
    ]
  }

  public_configs = [ ":includes" ]
}
