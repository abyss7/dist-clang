import "base/base.proto";
import "net/universal.proto";

package dist_clang.daemon.proto;

message Host {
  required string host          = 1;
  optional uint32 port          = 2 [ default = 6000 ];

  optional uint32 threads       = 3 [ default = 2 ];
  // Ignored for coordinators and collectors.

  optional bool disabled        = 4 [ default = false ];
  optional bool ipv6            = 5 [ default = false ];

  optional uint32 shard         = 6;
  // Ignored for coordinators and collectors.
}

message Configuration {
  message Cache {
    required string path         = 1;

    optional uint64 size         = 2 [ default = 0 ];
    // 0 - is unlimited

    optional bool direct         = 4 [ default = false ];

    optional bool mtime          = 5 [ default = false ];
    // TODO: not implemented yet.

    optional bool disabled       = 6 [ default = false ];
    optional bool snappy         = 7 [ default = true ];

    optional uint32 threads      = 8;
    // |std::thread::hardware_concurrency()| is default.

    optional uint32 clean_period = 9 [ default = 600 ];
    // in seconds.

    optional bool store_index    = 10 [ default = true ];
  }

  message Emitter {
    required string socket_path   = 1;
    repeated Host remotes         = 2;
    optional uint32 threads       = 3 [ default = 2 ];
    optional bool only_failed     = 4 [ default = false ];

    optional uint32 poll_interval = 5 [ default = 300 ];
    // Interval in seconds for polling coordinator.

    repeated Host coordinators    = 6;
    optional uint32 total_shards  = 7 [ default = 0 ];
    // Coordinator should set this field: 0 - means that shards not used.

    optional uint32 pop_timeout   = 8 [ default = 1 ];
    // in seconds - can't be zero.
  }

  message Absorber {
    required Host local = 1;

    optional uint32 run_timeout = 2 [ default = 60 ];
    // in seconds.
  }

  message Collector {
    required Host local = 1;
  }

  message Coordinator {
    required Host local   = 1;

    repeated Host remotes = 2;
    // Hosts to be propogated to clients and used as remotes.
  }

  // FIXME: use new protobuf feature "anyof" for emitter and absorber.
  optional Emitter emitter         = 1;
  optional Absorber absorber       = 2;

  optional Collector collector     = 3;

  optional uint32 pool_capacity    = 4 [ default = 16 ];
  // 0 - is unlimited.

  repeated base.proto.Compiler versions = 5;
  optional base.proto.Verbosity verbosity  = 6;
  optional uint32 user_id          = 7;

  optional string config_path      = 8;
  // allows reloading of config changes.

  optional Cache cache             = 9;

  optional uint32 connect_timeout  = 10 [ default = 10 ];
  // in seconds. Zero means system default.

  optional uint32 read_timeout     = 11 [ default = 60 ];
  // in seconds.

  optional uint32 send_timeout     = 12 [ default = 5  ];
  // in seconds.

  optional uint32 read_minimum     = 13 [ default = 32 ];
  // in bytes.

  optional Coordinator coordinator = 14;

  extend net.proto.Universal {
    optional Configuration extension = 8;
  }
}
